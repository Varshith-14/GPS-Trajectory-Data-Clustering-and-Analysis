# -*- coding: utf-8 -*-
"""project.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1YeQaLeOUuAI2TXnI6fY9Bzl4rxel8wzn
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.cluster import KMeans, AgglomerativeClustering, SpectralClustering, MeanShift

from sklearn.preprocessing import StandardScaler

import torch
import folium

from google.colab import drive
drive.mount('/content/drive')

# Load the GPS dataset
data = pd.read_csv('/content/drive/MyDrive/dataset_raw_full_Copy.csv', header=None)
data.columns = ['latitude', 'longitude', 'altitude', 'Date_Time']

# Split the Date_Time column into date and time columns
data[['date', 'time']] = data['Date_Time'].str.split(expand=True)
# Remove the original Date_Time column
data.drop('Date_Time', axis=1, inplace=True)
X = data[['latitude', 'longitude', 'altitude', 'date', 'time']].values

X

X = data[['latitude', 'longitude', 'altitude']].values

X

# Scale the data
scaler = StandardScaler()
X = scaler.fit_transform(X)

X

# Convert data to PyTorch tensor
X = torch.tensor(X, dtype=torch.float)

X

# Elbow method to find optimal number of clusters for K-means
wcss = [] #within cluster sum of square
for i in range(1, 11):
    kmeans = KMeans(n_clusters=i)
    kmeans.fit(X)
    wcss.append(kmeans.inertia_)
plt.plot(range(1, 11), wcss)
plt.title('Elbow Method')
plt.xlabel('Number of clusters')
plt.ylabel('WCSS')
plt.show()

# K-means clustering
kmeans = KMeans(n_clusters=4)
kmeans.fit(X)
labels_km = kmeans.labels_

# Plot the clusters
plt.scatter(X[:, 0], X[:, 1], c=labels_km)
plt.title('K-means Clustering')
plt.xlabel('Latitude')
plt.ylabel('Longitude')
plt.show()

# Plot K-means clustering results with identified mobility patterns
fig = plt.figure(figsize=(8, 8))
ax = fig.add_subplot(111, projection='3d')
colors = ['red', 'blue', 'green', 'orange']
for i in range(kmeans.n_clusters):
    ax.scatter(X[labels_km == i, 0], X[labels_km == i, 1], X[labels_km == i, 2], s=20, c=colors[i], label=f'Cluster {i}')
    center = kmeans.cluster_centers_[i]
    ax.scatter(center[0], center[1], center[2], s=200, c=colors[i], marker='*', label=f'Cluster {i} centroid')
ax.legend()
ax.set_xlabel('Latitude')
ax.set_ylabel('Longitude')
ax.set_zlabel('Altitude')
ax.set_title('K-means clustering with identified mobility patterns')
plt.show()

# Analyze mobility patterns for each cluster
for i in range(kmeans.n_clusters):
    cluster_indices = np.where(labels_km == i)[0]
    cluster_data = data.iloc[cluster_indices]
    print(f'K-means Cluster {i+1}:')
    print(f'Average altitude: {np.mean(cluster_data["altitude"]):.2f} meters')

    distances = np.sqrt(
        np.sum(np.diff(cluster_data[['latitude', 'longitude']])**2, axis=1))
    print(f'Distance traveled (mean): {np.mean(distances):.2f} meters')
    print(f'Distance traveled (max): {np.max(distances):.2f} meters')
    print()